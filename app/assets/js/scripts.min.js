/*!
 * fastshell
 * Fiercely quick and opinionated front-ends
 * https://HosseinKarami.github.io/fastshell
 * @author Hossein Karami
 * @version 1.0.5
 * Copyright 2018. MIT licensed.
 */
!function(e,o,s,t){"use strict";function n(e){console.log("mousemove"),e.pageX<200?(l.removeClass("hidden"),i.removeClass("full")):(l.addClass("hidden"),i.addClass("full"))}function a(){var s=e(o).width();s>=1280?(e(o).off("mousemove",n),l.removeClass("hidden"),i.removeClass("full")):s<1280&&s>900?e(o).off("mousemove",n).on("mousemove",n):(e(o).off("mousemove",n),l.addClass("hidden"),i.addClass("full"))}e(function(){}),e('a[href*="#"]').on("click",function(s){s.preventDefault(),e(".current").removeClass("current"),e(this).addClass("current");var t=(e(o).height()-e(e(this).attr("href")).height())/2;t<0&&(t=0),e("html, body").animate({scrollTop:e(e(this).attr("href")).offset().top-t},500)});var l=e(".sidebar"),i=e(".main");a(),e(o).on("resize",a),e(o).on("scroll",function(){var s=e(this).scrollTop()+e(o).height()/2;e("section").each(function(){var o=e(this).offset().top,t=e(this).attr("id");s>=o&&(e("nav > a").removeClass("current"),e('nav > a[href="#'+t+'"]').addClass("current"))})}),e(".lazy").unveil(null,function(){e(this).load(function(){this.style.opacity=1})})}(jQuery,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMuanMiXSwibmFtZXMiOlsiJCIsIndpbmRvdyIsImRvY3VtZW50IiwidW5kZWZpbmVkIiwibW91c2VNb3ZlSGFuZGxlciIsImUiLCJjb25zb2xlIiwibG9nIiwicGFnZVgiLCJzaWRlYmFyIiwicmVtb3ZlQ2xhc3MiLCJtYWluIiwiYWRkQ2xhc3MiLCJzaG93T3JIaWRlTWVudSIsInciLCJ3aWR0aCIsIm9mZiIsIm9uIiwicHJldmVudERlZmF1bHQiLCJ0aGlzIiwib2Zmc2V0IiwiaGVpZ2h0IiwiYXR0ciIsImFuaW1hdGUiLCJzY3JvbGxUb3AiLCJ0b3AiLCJwb3NpdGlvbiIsImVhY2giLCJ0YXJnZXQiLCJpZCIsInVudmVpbCIsImxvYWQiLCJzdHlsZSIsIm9wYWNpdHkiLCJqUXVlcnkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0NBQUEsU0FBQUEsRUFBQUMsRUFBQUMsRUFBQUMsR0FFQSxZQW9CQSxTQUFBQyxHQUFBQyxHQUNBQyxRQUFBQyxJQUFBLGFBQ0FGLEVBQUFHLE1BQUEsS0FDQUMsRUFBQUMsWUFBQSxVQUNBQyxFQUFBRCxZQUFBLFVBRUFELEVBQUFHLFNBQUEsVUFDQUQsRUFBQUMsU0FBQSxTQUlBLFFBQUFDLEtBQ0EsR0FBQUMsR0FBQWQsRUFBQUMsR0FBQWMsT0FDQUQsSUFBQSxNQUNBZCxFQUFBQyxHQUFBZSxJQUFBLFlBQUFaLEdBQ0FLLEVBQUFDLFlBQUEsVUFDQUMsRUFBQUQsWUFBQSxTQUNBSSxFQUFBLE1BQUFBLEVBQUEsSUFDQWQsRUFBQUMsR0FBQWUsSUFBQSxZQUFBWixHQUNBYSxHQUFBLFlBQUFiLElBRUFKLEVBQUFDLEdBQUFlLElBQUEsWUFBQVosR0FDQUssRUFBQUcsU0FBQSxVQUNBRCxFQUFBQyxTQUFBLFNBekNBWixFQUFBLGNBSUFBLEVBQUEsZ0JBQUFpQixHQUFBLFFBQUEsU0FBQVosR0FDQUEsRUFBQWEsaUJBQ0FsQixFQUFBLFlBQUFVLFlBQUEsV0FDQVYsRUFBQW1CLE1BQUFQLFNBQUEsVUFDQSxJQUFBUSxJQUFBcEIsRUFBQUMsR0FBQW9CLFNBQUFyQixFQUFBQSxFQUFBbUIsTUFBQUcsS0FBQSxTQUFBRCxVQUFBLENBQ0FELEdBQUEsSUFBQUEsRUFBQSxHQUNBcEIsRUFBQSxjQUFBdUIsU0FDQUMsVUFBQXhCLEVBQUFBLEVBQUFtQixNQUFBRyxLQUFBLFNBQUFGLFNBQUFLLElBQUFMLEdBQ0EsTUFHQSxJQUFBWCxHQUFBVCxFQUFBLFlBQ0FXLEVBQUFYLEVBQUEsUUE0QkFhLEtBRUFiLEVBQUFDLEdBQUFnQixHQUFBLFNBQUFKLEdBRUFiLEVBQUFDLEdBQUFnQixHQUFBLFNBQUEsV0FDQSxHQUFBUyxHQUFBMUIsRUFBQW1CLE1BQUFLLFlBQUF4QixFQUFBQyxHQUFBb0IsU0FBQSxDQUVBckIsR0FBQSxXQUFBMkIsS0FBQSxXQUNBLEdBQUFDLEdBQUE1QixFQUFBbUIsTUFBQUMsU0FBQUssSUFDQUksRUFBQTdCLEVBQUFtQixNQUFBRyxLQUFBLEtBRUFJLElBQUFFLElBQ0E1QixFQUFBLFdBQUFVLFlBQUEsV0FDQVYsRUFBQSxrQkFBQTZCLEVBQUEsTUFBQWpCLFNBQUEsZ0JBS0FaLEVBQUEsU0FBQThCLE9BQUEsS0FBQSxXQUNBOUIsRUFBQW1CLE1BQUFZLEtBQUEsV0FDQVosS0FBQWEsTUFBQUMsUUFBQSxPQUlBQyxPQUFBakMsT0FBQUMiLCJmaWxlIjoic2NyaXB0cy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICAkKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBGYXN0U2hlbGxcbiAgfSk7XG5cbiAgJCgnYVtocmVmKj1cIiNcIl0nKS5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAkKCcuY3VycmVudCcpLnJlbW92ZUNsYXNzKCdjdXJyZW50Jyk7XG4gICAgJCh0aGlzKS5hZGRDbGFzcygnY3VycmVudCcpO1xuICAgIHZhciBvZmZzZXQgPSAoJCh3aW5kb3cpLmhlaWdodCgpIC0gJCgkKHRoaXMpLmF0dHIoJ2hyZWYnKSkuaGVpZ2h0KCkpIC8gMjtcbiAgICBpZiAob2Zmc2V0IDwgMCkgeyBvZmZzZXQgPSAwOyB9XG4gICAgJCgnaHRtbCwgYm9keScpLmFuaW1hdGUoe1xuICAgICAgc2Nyb2xsVG9wOiAkKCQodGhpcykuYXR0cignaHJlZicpKS5vZmZzZXQoKS50b3AgLSBvZmZzZXRcbiAgICB9LCA1MDApO1xuICB9KTtcblxuICB2YXIgc2lkZWJhciA9ICQoJy5zaWRlYmFyJyk7XG4gIHZhciBtYWluID0gJCgnLm1haW4nKTtcblxuICBmdW5jdGlvbiBtb3VzZU1vdmVIYW5kbGVyKGUpIHtcbiAgICBjb25zb2xlLmxvZyhcIm1vdXNlbW92ZVwiKTtcbiAgICBpZiAoZS5wYWdlWCA8IDIwMCkge1xuICAgICAgc2lkZWJhci5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XG4gICAgICBtYWluLnJlbW92ZUNsYXNzKCdmdWxsJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNpZGViYXIuYWRkQ2xhc3MoJ2hpZGRlbicpO1xuICAgICAgbWFpbi5hZGRDbGFzcygnZnVsbCcpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3dPckhpZGVNZW51KCkge1xuICAgIHZhciB3ID0gJCh3aW5kb3cpLndpZHRoKCk7XG4gICAgaWYgKHcgPj0gMTI4MCkge1xuICAgICAgJCh3aW5kb3cpLm9mZignbW91c2Vtb3ZlJywgbW91c2VNb3ZlSGFuZGxlcik7XG4gICAgICBzaWRlYmFyLnJlbW92ZUNsYXNzKCdoaWRkZW4nKTtcbiAgICAgIG1haW4ucmVtb3ZlQ2xhc3MoJ2Z1bGwnKTtcbiAgICB9IGVsc2UgaWYgKHcgPCAxMjgwICYmIHcgPiA5MDApIHtcbiAgICAgICQod2luZG93KS5vZmYoJ21vdXNlbW92ZScsIG1vdXNlTW92ZUhhbmRsZXIpXG4gICAgICAgIC5vbignbW91c2Vtb3ZlJywgbW91c2VNb3ZlSGFuZGxlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgICQod2luZG93KS5vZmYoJ21vdXNlbW92ZScsIG1vdXNlTW92ZUhhbmRsZXIpO1xuICAgICAgc2lkZWJhci5hZGRDbGFzcygnaGlkZGVuJyk7XG4gICAgICBtYWluLmFkZENsYXNzKCdmdWxsJyk7XG4gICAgfVxuICB9XG4gIHNob3dPckhpZGVNZW51KCk7XG5cbiAgJCh3aW5kb3cpLm9uKCdyZXNpemUnLCBzaG93T3JIaWRlTWVudSk7XG5cbiAgJCh3aW5kb3cpLm9uKCdzY3JvbGwnLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBvc2l0aW9uID0gJCh0aGlzKS5zY3JvbGxUb3AoKSArICQod2luZG93KS5oZWlnaHQoKSAvIDI7XG5cbiAgICAkKCdzZWN0aW9uJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gJCh0aGlzKS5vZmZzZXQoKS50b3A7XG4gICAgICB2YXIgaWQgPSAkKHRoaXMpLmF0dHIoJ2lkJyk7XG5cbiAgICAgIGlmIChwb3NpdGlvbiA+PSB0YXJnZXQpIHtcbiAgICAgICAgJCgnbmF2ID4gYScpLnJlbW92ZUNsYXNzKCdjdXJyZW50Jyk7XG4gICAgICAgICQoJ25hdiA+IGFbaHJlZj1cIiMnICsgaWQgKyAnXCJdJykuYWRkQ2xhc3MoJ2N1cnJlbnQnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgJChcIi5sYXp5XCIpLnVudmVpbChudWxsLCBmdW5jdGlvbiAoKSB7XG4gICAgJCh0aGlzKS5sb2FkKGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuc3R5bGUub3BhY2l0eSA9IDE7XG4gICAgfSk7XG4gIH0pO1xuXG59KShqUXVlcnksIHdpbmRvdywgZG9jdW1lbnQpOyJdfQ==
